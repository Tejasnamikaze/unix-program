#include<fcntl.h>
#include<stdio.h>
#include<unistd.h>
#include<sys/types.h>
#include<sys/stat.h>
#include<stdlib.h>
void main()
{   int fd;
    struct stat buf;
    fd=open("f5.txt",O_RDONLY|O_CREAT,600);
    if(fd!=-1)
    { if(fstat(fd,&buf)==0)
    { printf("mode of fileis %d",buf.st_mode);
    printf("\n size of the file is %ld",buf.st_size);
    printf("\n device name %ld",buf.st_dev);
    printf("\n inode of file is %ld",buf.st_ino);
    printf("\n no. of links are %ld",buf.st_nlink);
    printf("\n owner of a file is %d",buf.st_uid);
    printf("\n no.of blocks is %ld",buf.st_blocks);
    printf("\n group owner is %d",buf.st_gid);
    printf("\n blocks size of the file is %ld",buf.st_blksize);
    printf("\n time of last modifiedis %ld",buf.st_ctime);
}
else
printf("error in fstat() syscall");
}
else
printf("error in open() sys call");
}



#include<sys/stat.h>
#include<stdio.h>
#include<fcntl.h>
#include<unistd.h>
#include<stdlib.h>

int main( int argc,char *argv[3] )
{
int fd,i;
char buf[2];
fd=open(argv[1],O_RDONLY,0777);
if(fd==-argc)
{
printf("file open error");
}
else
{
while((i=read(fd,buf,1))>0)
{
printf("%c",buf[0]);
}
close(fd);
}
}



#include<sys/types.h>
#include<sys/stat.h>
#include<stdio.h>
#include<fcntl.h>
#include<unistd.h>
#include<stdlib.h>


int main( int argc,char *argv[] )
{
int i,fd1,fd2;
char *file1,*file2,buf[2];
file1=argv[1];
file2=argv[2];
printf("file1=%s file2=%s",file1,file2);
fd1=open(file1,O_RDONLY,0777);
fd2=creat(file2,0777);
while(i=read(fd1,buf,1)>0)
write(fd2,buf,1);
remove(file1);
close(fd1);
close(fd2);
}


#include<stdlib.h>
#include<stdio.h>
#include<string.h>
int main(int argc, char *argv[])
{
char d[50];
if(argc==2)
{
bzero(d,sizeof(d));
strcat(d,"ls ");
strcat(d,"-i ");
strcat(d,argv[1]);
system(d);
}
else
printf("\nInvalid No. of inputs");
}



#include <stdio.h>
#include <sys/wait.h> 
#include<sys/types.h>
#include<sys/stat.h>
#include<fcntl.h>
#include<unistd.h>
#include<stdlib.h>
int main(void)
{
int pid;
int status;
printf("Hello World!\n");
pid = fork( );
if(pid == -1) /* check for error in fork */
{
perror("bad fork");
exit(1);
}
if (pid == 0)
printf("I am the child process.\n");
else
{
wait(&status); /* parent waits for child to finish */
printf("I am the parent process.\n");
}
}


#include<sys/types.h>
#include<sys/stat.h>
#include<stdio.h>
#include<fcntl.h>
#include<unistd.h>
#include<stdlib.h>
int main ()
{
  pid_t child_pid;
  child_pid = fork ();
  if (child_pid > 0) {
    sleep (60);
  }
  else {
    exit (0);
  }
  return 0;
}



#include<sys/types.h>
#include<sys/stat.h>
#include<stdio.h>
#include<fcntl.h>
#include<unistd.h>
#include<stdlib.h>
int main()
{
int pid ;
printf("I'am the original process with PID %d and PPID %d.\n",getpid(),getppid());
pid=fork();
if(pid!=0 )
{
printf("I'am the parent with PID %d and PPID %d.\n",getpid(),getppid());
printf("My child's PID is %d\n",pid) ;
}
else
{
sleep(4);
printf("I'm the child with PID %d and PPID %d.\n",getpid(), getppid()) ;
}
printf ("PID %d terminates.\n", getpid()) ;
}



#include<sys/types.h>
#include<sys/stat.h>
#include<stdio.h>
#include<fcntl.h>
#include<unistd.h>
#include<stdlib.h>


int main( int argc,char *argv[] )
{
int i,fd1,fd2;
char buf[50];
fd1=open(argv[1],O_RDONLY,0777);
fd2=open(argv[2],O_RDWR,0777);
while((i=read(fd1,buf,sizeof(buf))>0))
{
write(fd2,buf,sizeof(buf));
}
close(fd1);
close(fd2);
}



#include<sys/types.h>
#include<sys/stat.h>
#include<stdio.h>
#include<fcntl.h>
#include<unistd.h>
#include<stdlib.h>

int main(int argc,char* argv[])
{

if(link(argv[1],argv[2])==-1)
{
printf("Can't Link\n");
return 1;
}
else
{
printf("Files have been Linked\n");
}
return 0;
}


#include<stdio.h>
#include<unistd.h>
#include<sys/wait.h>
#include<sys/types.h>
 

 
int main()
{
    int i;
    int pid = fork();
    if (pid == 0)
        for (i=0; i<20; i++)
            printf("I am Child\n");
    else
    {
        wait(NULL);
        printf("I am Parent\n");
        
    }
}


#include<stdio.h>
#include<unistd.h>
#include<sys/wait.h>
#include<sys/types.h>
 
void func(int signum)
{
    wait(NULL);
}
 
int main()
{
    int i;
    int pid = fork();
    if (pid == 0)
        for (i=0; i<20; i++)
            printf("I am Child\n");
    else
    {
        signal(SIGCHLD, func);
        printf("I am Parent\n");
        while(1);
    }
}



#include<stdio.h>
#include<unistd.h>
#include<sys/types.h>
#include<iostream>
#include<fcntl.h>

using namespace std;

int main()

{ 
int fd1;

char b1[]="Dept of IS";

char b2[]="Dept of cs";

fd1=creat("ISE.txt",0622);

if(fd1<0)

{ cout<<"Error in creating file"<<endl;

return 0; }

write(fd1,b1,10);

lseek(fd1,48,SEEK_SET);

write(fd1,b2,10);

close(fd1);

return 0;}
#include<sys/types.h>
#include<sys/stat.h>
#include<stdio.h>
#include<fcntl.h>
#include<unistd.h>
#include<stdlib.h>

int main(int argc,char *argv[] )
{
 int fd,i;
 char buf[50];
 fd= open(argv[1],O_RDWR);
 while(i=read(0,buf,50))
 {
  write(fd,buf,50);
  }
  return 0;
}


#include <stdio.h>
#include <stdlib.h>
  
// Maximum range of bytes
#define MAX 1000
  
// Filename given as the command
// line argument
int main(int argc, char* argv[])
{
    // Pointer to the file to be
    // read from
    FILE* fptr1;
    char c;
  
    // Stores the bytes to read
    char str[MAX];
    int i = 0, j, from, to;
  
    // If the file exists and has
    // read permission
    fptr1 = fopen(argv[1], "r");
  
    if (fptr1 == NULL) {
        return 1;
    }
  
    // Input from the user range of
    // bytes inclusive of from and to
    printf("Read bytes from: ");
    scanf("%d", &from);
    printf("Read bytes upto: ");
    scanf("%d", &to);
  
    // Loop to read required byte
    // of file
    for (i = 0, j = 0; i <= to
                       && c != EOF;
         i++) {
  
        // Skip the bytes not required
        if (i >= from) {
            str[j] = c;
            j++;
        }
  
        // Get the characters
        c = fgetc(fptr1);
    }
  
    // Print the bytes as string
    printf("%s", str);
  
    // Close the file
    fclose(fptr1);
  
    return 0;
}




#include<sys/types.h>
#include<sys/stat.h>
#include<stdio.h>
#include<fcntl.h>
#include<unistd.h>
#include<sys/wait.h>
#include<stdlib.h>

int main()
{
    pid_t child_pid;
    int i, j, k, n;
    int sum;

    printf("Enter the last number of series : ");
    scanf("%d", &n);
    printf("pid = %d\n", getpid());

    for(i = 0; i < 2; i++)
    {
        child_pid = fork();
        if (child_pid < 0)
        {
            printf("Failed to create child process . . .");
            return 1;
        }
        else if (child_pid == 0)
        {
            if (i == 0) //find the sum of odd series
            {
                sum = 0;
                for(j = 1; j <= n; j += 2)
                    sum += j;

                printf("Sum of Odd series : %d\n", sum);
                exit(0);
            }
            else if (i == 1) //find the sum of even series
            {
                sum = 0;
                for(j = 2; j <= n; j += 2)
                    sum += j;

                printf("Sum of Even series : %d\n", sum);
                exit(0);
            }

        }
        else
        {
            wait(&child_pid);
        }
    }
    return 0;
}
